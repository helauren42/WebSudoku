{"ast":null,"code":"import { useRef, useEffect } from 'react';\nimport { SOCKET_ADDRESS } from './Const';\n// game -> puzzle -> cells\n//\t\t-> level\n/**\n * @typedef {Object} Cell\n * @property {number|null} value - The cell's value (e.g., 1-9 for Sudoku).\n * @property {number[]} notes - Array of possible values (notes).\n * @property {boolean|null} mod - Whether the cell is modifiable.\n */\n\n/**\n * @class\n */\nclass Cell {\n  constructor() {\n    this.value = null;\n    this.notes = [];\n    this.mod = null;\n  }\n  init(_value) {\n    this.value = _value;\n    this.mod = _value != 0 ? \"const\" : \"var\";\n  }\n  fill(_value) {\n    if (this.mod == \"const\") {\n      console.log(\"const\");\n      throw \"This cell value can not be modified\";\n      return;\n    } else {\n      console.log(\"var\");\n      this.value = _value;\n    }\n  }\n  addNotes(number) {\n    this.notes.push(number);\n  }\n  rmNotes() {\n    this.notes = [];\n  }\n}\n\n/**\n * @typedef {Object} Game\n * @property {string} level - The game difficulty level.\n * @property {Cell[][]} puzzle - 2D array of Cell objects (e.g., 9x9 grid).\n */\n\n/**\n * @class\n */\nclass Game {\n  constructor(level, puzzle) {\n    this.level = level;\n    this.puzzle = puzzle;\n  }\n}\nclass AbstractBoard {\n  constructor() {\n    this.game = null;\n    this.staticPuzzle = this.getStaticPuzzle();\n    this.row = null;\n    this.column = null;\n    this.msc = 10;\n    this.makeCanvas();\n  }\n  makeCanvas() {\n    console.log(\"makeCanvas\");\n    let length;\n    let canvas = document.getElementById('my-canvas');\n    let container = document.getElementById('my-canvas-container');\n    let parentHeight = container.getBoundingClientRect().height;\n    let parentWidth = container.getBoundingClientRect().width;\n    if (parentHeight >= parentWidth) {\n      length = parentWidth * 0.8;\n    } else {\n      length = parentHeight * 0.85;\n    }\n    console.log(this.msc);\n    canvas.width = length + this.msc * 3;\n    canvas.height = length + this.msc * 3;\n    this.length = length;\n    this.noteCellLength = this.cellLength / 3;\n    this.cellLength = length / 9;\n    this.canvas = canvas;\n    this.ctx = canvas.getContext('2d');\n    return;\n  }\n  makePuzzleStructure() {\n    let ret = [];\n    for (let i = 1; i <= 9; i++) {\n      let row = [];\n      for (let j = 1; j <= 9; j++) {\n        row.push(new Cell());\n      }\n      ret.push(row);\n    }\n    return ret;\n  }\n  initPuzzle(sudokuGrid, puzzle) {\n    for (let y = 0; y < 9; y++) {\n      for (let x = 0; x < 9; x++) {\n        puzzle[y][x].init(sudokuGrid[y][x]);\n      }\n    }\n  }\n  getStaticPuzzle() {\n    const sudokuGrid = [[5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9]];\n    let puzzle = this.makePuzzleStructure();\n    this.initPuzzle(sudokuGrid, puzzle);\n    return puzzle;\n  }\n  makeSudokuGrid(array) {\n    let ret = [];\n    for (let i = 0; array[i]; i++) {\n      const string = array[i];\n      let row = [];\n      for (let j = 0; string[j]; j++) {\n        row.push(parseInt(string[j]));\n      }\n      ret.push(row);\n    }\n    return ret;\n  }\n  makeDynamicPuzzle(array) {\n    let puzzle = this.makePuzzleStructure();\n    const sudokuGrid = this.makeSudokuGrid(array);\n    this.initPuzzle(sudokuGrid, puzzle);\n    return puzzle;\n  }\n  clearBoard() {\n    this.ctx.fillStyle = '#bfd2cc';\n    this.ctx.fillRect(10, 10, this.length, this.length);\n  }\n  drawNotes(cellX, cellY) {\n    let startX = this.msc + this.cellLength * cellX;\n    let startY = this.msc + this.cellLength * cellY;\n    for (let line = 1; line <= 3; line++) {}\n  }\n  drawSelectedCell() {\n    console.log(\"drawing selected cell\");\n    const x = this.column - 1;\n    const y = this.row - 1;\n    const cellX = this.msc + this.cellLength * x;\n    const cellY = this.msc + this.cellLength * y;\n    // make background light color\n    this.ctx.fillStyle = \"#bad6cf\";\n    this.ctx.fillRect(cellX, cellY, this.cellLength, this.cellLength);\n\n    // make border\n    this.ctx.strokeStyle = \"#859c95\";\n    this.ctx.lineWidth = 4;\n    this.drawCell(cellX, cellY);\n\n    // draw Number\n    this.ctx.fillStyle = \"#859c95\";\n    this.drawInsideCell(x, y, cellX, cellY, this.game.puzzle);\n  }\n  drawCell(cellX, cellY) {\n    this.ctx.beginPath();\n    this.ctx.rect(cellX, cellY, this.cellLength, this.cellLength);\n    this.ctx.stroke();\n  }\n  drawInsideCell(x, y, cellX, cellY, puzzle) {\n    const character = puzzle[y][x].value;\n    if (character === 0) {\n      if (puzzle[y][x].notes.length > 0) this.drawNotes(cellX, cellY);\n      return;\n    }\n    this.ctx.fillStyle = puzzle[y][x].mod == \"const\" ? '#343d39' : \"#4b6a66\";\n    const midx = cellX + this.cellLength / 2;\n    const midy = cellY + this.cellLength / 2;\n    this.ctx.font = `${this.cellLength * 0.8}px Roboto Slab`;\n    const textSize = this.ctx.measureText(character);\n    const startX = midx - textSize.width / 2;\n    const startY = midy + (textSize.actualBoundingBoxAscent - textSize.actualBoundingBoxDescent) / 2;\n    this.ctx.fillText(character, startX, startY);\n  }\n  drawRegions() {\n    this.ctx.lineWidth = 3;\n    this.ctx.strokeStyle = '#455c52';\n    this.ctx.beginPath();\n    const regionLength = this.length / 3;\n    for (let y = 0; y <= 3; y++) {\n      this.ctx.moveTo(this.msc, this.msc + y * regionLength);\n      this.ctx.lineTo(this.msc + this.length, this.msc + y * regionLength);\n      this.ctx.stroke();\n    }\n    for (let x = 0; x <= 3; x++) {\n      this.ctx.moveTo(this.msc + x * regionLength, this.msc);\n      this.ctx.lineTo(this.msc + x * regionLength, this.msc + this.length);\n      this.ctx.stroke();\n    }\n  }\n  /**\n   * @param {Cell[][]} puzzle - 2D array of Cell objects\n   */\n  drawPuzzle(puzzle) {\n    // background\n    this.ctx.fillStyle = '#bfd2cc';\n    this.ctx.fillRect(10, 10, this.length, this.length);\n    this.drawRegions();\n    this.ctx.lineWidth = 1;\n    // this.ctx.strokeStyle = '#343d39'\n\n    for (let y = 0; y < 9; y++) {\n      for (let x = 0; x < 9; x++) {\n        const cellX = x * this.cellLength + this.msc;\n        const cellY = y * this.cellLength + this.msc;\n        this.drawCell(cellX, cellY);\n        this.drawInsideCell(x, y, cellX, cellY, puzzle);\n      }\n    }\n  }\n  async fetchDynamicPuzzle(currentLevel) {\n    const url = \"http://\" + SOCKET_ADDRESS + '/fetchPuzzle/' + currentLevel;\n    console.log(url);\n    const arrayPuzzle = await fetch(url).then(res => {\n      return res.json();\n    }).then(data => {\n      return JSON.parse(data);\n    });\n    return this.makeDynamicPuzzle(arrayPuzzle);\n  }\n}\n\n/**\n * @typedef {Object} AbstractBoard\n * @property {function(): void} makeCanvas - Creates the canvas.\n * @property {Game|null} game - The current game instance.\n * @property {Cell[][]} staticPuzzle - Static puzzle grid.\n * @property {number|null} row - Selected row index.\n * @property {number|null} column - Selected column index.\n * @property {number} msc - Some constant (e.g., 10).\n */\n\n/**\n * @class\n */\nexport class Board extends AbstractBoard {\n  constructor() {\n    super();\n    console.log(\"Board constructor\");\n  }\n  drawStaticPuzzle() {\n    this.drawPuzzle(this.staticPuzzle);\n  }\n  async drawDynamicPuzzle(currentLevel) {\n    console.log(\"drawDynamicPuzzle: \", currentLevel);\n    if (!this.game || this.game.level != currentLevel) {\n      console.log(`new game ${!this.game ? \"no active game\" : \"different level\"}`);\n      const puzzle = await this.fetchDynamicPuzzle(currentLevel);\n      this.game = new Game(currentLevel, puzzle);\n    }\n    this.drawPuzzle(this.game.puzzle);\n  }\n  updateCell(y, x, value) {\n    console.log(\"pre value: \", this.game.puzzle[x][y].value = value);\n    try {\n      this.game.puzzle[x][y].fill(value);\n    } catch (err) {\n      console.log(\"You tried to modify a cell from the initial puzzle: \", err);\n    }\n    console.log(\"post value: \", this.game.puzzle[x][y].value = value);\n    this.drawPuzzle(this.game.puzzle);\n  }\n  updateSelection(canvasX, canvasY) {\n    canvasX -= this.msc;\n    canvasY -= this.msc;\n    console.log(\"updateSelection called\");\n    const posX = canvasX / this.cellLength;\n    const posY = canvasY / this.cellLength;\n    console.log(\"posX: \", posX);\n    console.log(\"posY: \", posY);\n    const newcolumn = Math.ceil(posX);\n    const newrow = Math.ceil(posY);\n    if (newcolumn < 1 || newrow < 1 || newcolumn > 9 || newrow > 9 || this.column && this.row && this.column == newcolumn && this.row == newrow) {\n      this.column = null;\n      this.newrow = null;\n      console.log(\"unselected cell\");\n      return null;\n    }\n    this.column = newcolumn;\n    this.row = newrow;\n    console.log(`selected row: ${this.row}), cell(col: ${this.column}`);\n    return {\n      \"x\": this.column - 1,\n      \"y\": this.row - 1\n    };\n  }\n  draw(activeGame, currentLevel) {\n    if (!activeGame) {\n      console.log(\"drawing static puzzle\");\n      this.drawStaticPuzzle();\n    } else {\n      console.log(\"drawing dynamic puzzle level \", currentLevel);\n      this.drawDynamicPuzzle(currentLevel);\n      if (this.column && this.row && this.column >= 1 && this.column <= 9 && this.row >= 1 && this.row <= 9) this.drawSelectedCell();\n    }\n  }\n  giveUp() {\n    this.game = null;\n  }\n  resize() {\n    this.makeCanvas();\n  }\n}","map":{"version":3,"names":["useRef","useEffect","SOCKET_ADDRESS","Cell","constructor","value","notes","mod","init","_value","fill","console","log","addNotes","number","push","rmNotes","Game","level","puzzle","AbstractBoard","game","staticPuzzle","getStaticPuzzle","row","column","msc","makeCanvas","length","canvas","document","getElementById","container","parentHeight","getBoundingClientRect","height","parentWidth","width","noteCellLength","cellLength","ctx","getContext","makePuzzleStructure","ret","i","j","initPuzzle","sudokuGrid","y","x","makeSudokuGrid","array","string","parseInt","makeDynamicPuzzle","clearBoard","fillStyle","fillRect","drawNotes","cellX","cellY","startX","startY","line","drawSelectedCell","strokeStyle","lineWidth","drawCell","drawInsideCell","beginPath","rect","stroke","character","midx","midy","font","textSize","measureText","actualBoundingBoxAscent","actualBoundingBoxDescent","fillText","drawRegions","regionLength","moveTo","lineTo","drawPuzzle","fetchDynamicPuzzle","currentLevel","url","arrayPuzzle","fetch","then","res","json","data","JSON","parse","Board","drawStaticPuzzle","drawDynamicPuzzle","updateCell","err","updateSelection","canvasX","canvasY","posX","posY","newcolumn","Math","ceil","newrow","draw","activeGame","giveUp","resize"],"sources":["/home/henri/Projects/WebSudoku/react-app/src/Board.js"],"sourcesContent":["import { useRef, useEffect } from 'react';\nimport { SOCKET_ADDRESS } from './Const';\n// game -> puzzle -> cells\n//\t\t-> level\n/**\n * @typedef {Object} Cell\n * @property {number|null} value - The cell's value (e.g., 1-9 for Sudoku).\n * @property {number[]} notes - Array of possible values (notes).\n * @property {boolean|null} mod - Whether the cell is modifiable.\n */\n\n/**\n * @class\n */\nclass Cell {\n\tconstructor() {\n\t\tthis.value = null\n\t\tthis.notes = []\n\t\tthis.mod = null;\n\t}\n\tinit(_value) {\n\t\tthis.value = _value\n\t\tthis.mod = _value != 0 ? \"const\" : \"var\"\n\t}\n\tfill(_value) {\n\t\tif (this.mod == \"const\") {\n\t\t\tconsole.log(\"const\")\n\t\t\tthrow \"This cell value can not be modified\"\n\t\t\treturn\n\t\t}\n\t\telse {\n\t\t\tconsole.log(\"var\")\n\t\t\tthis.value = _value\n\t\t}\n\t}\n\taddNotes(number) {\n\t\tthis.notes.push(number)\n\t}\n\trmNotes() {\n\t\tthis.notes = []\n\t}\n}\n\n/**\n * @typedef {Object} Game\n * @property {string} level - The game difficulty level.\n * @property {Cell[][]} puzzle - 2D array of Cell objects (e.g., 9x9 grid).\n */\n\n/**\n * @class\n */\nclass Game {\n\tconstructor(level, puzzle) {\n\t\tthis.level = level\n\t\tthis.puzzle = puzzle\n\t}\n}\n\nclass AbstractBoard {\n\tconstructor() {\n\t\tthis.game = null\n\t\tthis.staticPuzzle = this.getStaticPuzzle()\n\t\tthis.row = null\n\t\tthis.column = null\n\t\tthis.msc = 10\n\t\tthis.makeCanvas()\n\t}\n\tmakeCanvas() {\n\t\tconsole.log(\"makeCanvas\")\n\t\tlet length;\n\n\t\tlet canvas = document.getElementById('my-canvas')\n\t\tlet container = document.getElementById('my-canvas-container')\n\t\tlet parentHeight = container.getBoundingClientRect().height\n\t\tlet parentWidth = container.getBoundingClientRect().width\n\n\t\tif (parentHeight >= parentWidth) {\n\t\t\tlength = parentWidth * 0.8\n\t\t}\n\t\telse {\n\t\t\tlength = parentHeight * 0.85\n\t\t}\n\t\tconsole.log(this.msc)\n\t\tcanvas.width = length + this.msc * 3\n\t\tcanvas.height = length + this.msc * 3\n\n\t\tthis.length = length\n\t\tthis.noteCellLength = this.cellLength / 3\n\t\tthis.cellLength = length / 9\n\t\tthis.canvas = canvas\n\t\tthis.ctx = canvas.getContext('2d')\n\t\treturn\n\t}\n\tmakePuzzleStructure() {\n\t\tlet ret = []\n\t\tfor (let i = 1; i <= 9; i++) {\n\t\t\tlet row = []\n\t\t\tfor (let j = 1; j <= 9; j++) {\n\t\t\t\trow.push(new Cell())\n\t\t\t}\n\t\t\tret.push(row)\n\t\t}\n\t\treturn ret;\n\t}\n\tinitPuzzle(sudokuGrid, puzzle) {\n\t\tfor (let y = 0; y < 9; y++) {\n\t\t\tfor (let x = 0; x < 9; x++) {\n\t\t\t\tpuzzle[y][x].init(sudokuGrid[y][x])\n\t\t\t}\n\t\t}\n\t}\n\tgetStaticPuzzle() {\n\t\tconst sudokuGrid = [\n\t\t\t[5, 3, 4, 6, 7, 8, 9, 1, 2],\n\t\t\t[6, 7, 2, 1, 9, 5, 3, 4, 8],\n\t\t\t[1, 9, 8, 3, 4, 2, 5, 6, 7],\n\t\t\t[8, 5, 9, 7, 6, 1, 4, 2, 3],\n\t\t\t[4, 2, 6, 8, 5, 3, 7, 9, 1],\n\t\t\t[7, 1, 3, 9, 2, 4, 8, 5, 6],\n\t\t\t[9, 6, 1, 5, 3, 7, 2, 8, 4],\n\t\t\t[2, 8, 7, 4, 1, 9, 6, 3, 5],\n\t\t\t[3, 4, 5, 2, 8, 6, 1, 7, 9]\n\t\t];\n\t\tlet puzzle = this.makePuzzleStructure()\n\t\tthis.initPuzzle(sudokuGrid, puzzle)\n\t\treturn puzzle\n\t}\n\tmakeSudokuGrid(array) {\n\t\tlet ret = []\n\t\tfor (let i = 0; array[i]; i++) {\n\t\t\tconst string = array[i]\n\t\t\tlet row = []\n\t\t\tfor (let j = 0; string[j]; j++) {\n\t\t\t\trow.push(parseInt(string[j]))\n\t\t\t}\n\t\t\tret.push(row)\n\t\t}\n\t\treturn ret\n\t}\n\tmakeDynamicPuzzle(array) {\n\t\tlet puzzle = this.makePuzzleStructure()\n\t\tconst sudokuGrid = this.makeSudokuGrid(array)\n\t\tthis.initPuzzle(sudokuGrid, puzzle)\n\t\treturn puzzle\n\t}\n\tclearBoard() {\n\t\tthis.ctx.fillStyle = '#bfd2cc'\n\t\tthis.ctx.fillRect(10, 10, this.length, this.length)\n\t}\n\tdrawNotes(cellX, cellY) {\n\t\tlet startX = this.msc + this.cellLength * cellX\n\t\tlet startY = this.msc + this.cellLength * cellY\n\t\tfor (let line = 1; line <= 3; line++) {\n\n\t\t}\n\t}\n\tdrawSelectedCell() {\n\t\tconsole.log(\"drawing selected cell\")\n\t\tconst x = this.column - 1\n\t\tconst y = this.row - 1\n\t\tconst cellX = this.msc + this.cellLength * x\n\t\tconst cellY = this.msc + this.cellLength * y\n\t\t// make background light color\n\t\tthis.ctx.fillStyle = \"#bad6cf\"\n\t\tthis.ctx.fillRect(cellX, cellY, this.cellLength, this.cellLength)\n\n\t\t// make border\n\t\tthis.ctx.strokeStyle = \"#859c95\"\n\t\tthis.ctx.lineWidth = 4\n\t\tthis.drawCell(cellX, cellY)\n\n\t\t// draw Number\n\t\tthis.ctx.fillStyle = \"#859c95\";\n\t\tthis.drawInsideCell(x, y, cellX, cellY, this.game.puzzle)\n\t}\n\tdrawCell(cellX, cellY) {\n\t\tthis.ctx.beginPath()\n\t\tthis.ctx.rect(cellX, cellY, this.cellLength, this.cellLength)\n\t\tthis.ctx.stroke()\n\t}\n\tdrawInsideCell(x, y, cellX, cellY, puzzle) {\n\t\tconst character = puzzle[y][x].value\n\t\tif (character === 0) {\n\t\t\tif (puzzle[y][x].notes.length > 0)\n\t\t\t\tthis.drawNotes(cellX, cellY)\n\t\t\treturn\n\t\t}\n\t\tthis.ctx.fillStyle = puzzle[y][x].mod == \"const\" ? '#343d39' : \"#4b6a66\"\n\t\tconst midx = cellX + (this.cellLength / 2)\n\t\tconst midy = cellY + (this.cellLength / 2)\n\t\tthis.ctx.font = `${this.cellLength * 0.8}px Roboto Slab`;\n\t\tconst textSize = this.ctx.measureText(character)\n\t\tconst startX = midx - textSize.width / 2;\n\t\tconst startY = midy + (textSize.actualBoundingBoxAscent - textSize.actualBoundingBoxDescent) / 2;\n\t\tthis.ctx.fillText(character, startX, startY)\n\n\t}\n\tdrawRegions() {\n\t\tthis.ctx.lineWidth = 3\n\t\tthis.ctx.strokeStyle = '#455c52'\n\t\tthis.ctx.beginPath()\n\t\tconst regionLength = this.length / 3\n\t\tfor (let y = 0; y <= 3; y++) {\n\t\t\tthis.ctx.moveTo(this.msc, this.msc + y * regionLength)\n\t\t\tthis.ctx.lineTo(this.msc + this.length, this.msc + y * regionLength)\n\t\t\tthis.ctx.stroke()\n\t\t}\n\t\tfor (let x = 0; x <= 3; x++) {\n\t\t\tthis.ctx.moveTo(this.msc + x * regionLength, this.msc)\n\t\t\tthis.ctx.lineTo(this.msc + x * regionLength, this.msc + this.length)\n\t\t\tthis.ctx.stroke()\n\t\t}\n\t}\n\t/**\n\t * @param {Cell[][]} puzzle - 2D array of Cell objects\n\t */\n\tdrawPuzzle(puzzle) {\n\t\t// background\n\t\tthis.ctx.fillStyle = '#bfd2cc'\n\t\tthis.ctx.fillRect(10, 10, this.length, this.length)\n\n\t\tthis.drawRegions()\n\n\t\tthis.ctx.lineWidth = 1\n\t\t// this.ctx.strokeStyle = '#343d39'\n\n\t\tfor (let y = 0; y < 9; y++) {\n\t\t\tfor (let x = 0; x < 9; x++) {\n\t\t\t\tconst cellX = x * this.cellLength + this.msc\n\t\t\t\tconst cellY = y * this.cellLength + this.msc\n\t\t\t\tthis.drawCell(cellX, cellY)\n\t\t\t\tthis.drawInsideCell(x, y, cellX, cellY, puzzle)\n\t\t\t}\n\t\t}\n\t}\n\tasync fetchDynamicPuzzle(currentLevel) {\n\t\tconst url = \"http://\" + SOCKET_ADDRESS + '/fetchPuzzle/' + currentLevel\n\t\tconsole.log(url)\n\t\tconst arrayPuzzle = await fetch(url).then((res) => {\n\t\t\treturn res.json()\n\t\t}\n\t\t).then((data) => {\n\t\t\treturn JSON.parse(data)\n\t\t})\n\t\treturn this.makeDynamicPuzzle(arrayPuzzle)\n\t}\n}\n\n/**\n * @typedef {Object} AbstractBoard\n * @property {function(): void} makeCanvas - Creates the canvas.\n * @property {Game|null} game - The current game instance.\n * @property {Cell[][]} staticPuzzle - Static puzzle grid.\n * @property {number|null} row - Selected row index.\n * @property {number|null} column - Selected column index.\n * @property {number} msc - Some constant (e.g., 10).\n */\n\n/**\n * @class\n */\nexport class Board extends AbstractBoard {\n\tconstructor() {\n\t\tsuper()\n\t\tconsole.log(\"Board constructor\")\n\t}\n\tdrawStaticPuzzle() {\n\t\tthis.drawPuzzle(this.staticPuzzle)\n\t}\n\tasync drawDynamicPuzzle(currentLevel) {\n\t\tconsole.log(\"drawDynamicPuzzle: \", currentLevel)\n\t\tif (!this.game || this.game.level != currentLevel) {\n\t\t\tconsole.log(`new game ${!this.game ? \"no active game\" : \"different level\"}`)\n\t\t\tconst puzzle = await this.fetchDynamicPuzzle(currentLevel);\n\t\t\tthis.game = new Game(currentLevel, puzzle)\n\t\t}\n\t\tthis.drawPuzzle(this.game.puzzle)\n\t}\n\tupdateCell(y, x, value) {\n\t\tconsole.log(\"pre value: \", this.game.puzzle[x][y].value = value)\n\t\ttry {\n\t\t\tthis.game.puzzle[x][y].fill(value);\n\t\t}\n\t\tcatch (err) {\n\t\t\tconsole.log(\"You tried to modify a cell from the initial puzzle: \", err)\n\t\t}\n\t\tconsole.log(\"post value: \", this.game.puzzle[x][y].value = value)\n\t\tthis.drawPuzzle(this.game.puzzle)\n\t}\n\tupdateSelection(canvasX, canvasY) {\n\t\tcanvasX -= this.msc\n\t\tcanvasY -= this.msc\n\t\tconsole.log(\"updateSelection called\")\n\t\tconst posX = canvasX / this.cellLength\n\t\tconst posY = canvasY / this.cellLength\n\t\tconsole.log(\"posX: \", posX)\n\t\tconsole.log(\"posY: \", posY)\n\t\tconst newcolumn = Math.ceil(posX)\n\t\tconst newrow = Math.ceil(posY)\n\n\t\tif ((newcolumn < 1 || newrow < 1 || newcolumn > 9 || newrow > 9)\n\t\t\t|| (this.column && this.row && this.column == newcolumn && this.row == newrow)) {\n\t\t\tthis.column = null;\n\t\t\tthis.newrow = null;\n\t\t\tconsole.log(\"unselected cell\")\n\t\t\treturn null\n\t\t}\n\t\tthis.column = newcolumn\n\t\tthis.row = newrow\n\t\tconsole.log(`selected row: ${this.row}), cell(col: ${this.column}`)\n\t\treturn { \"x\": this.column - 1, \"y\": this.row - 1 }\n\t}\n\tdraw(activeGame, currentLevel) {\n\t\tif (!activeGame) {\n\t\t\tconsole.log(\"drawing static puzzle\")\n\t\t\tthis.drawStaticPuzzle()\n\t\t}\n\t\telse {\n\t\t\tconsole.log(\"drawing dynamic puzzle level \", currentLevel)\n\t\t\tthis.drawDynamicPuzzle(currentLevel)\n\t\t\tif (this.column && this.row && this.column >= 1 && this.column <= 9 && this.row >= 1 && this.row <= 9)\n\t\t\t\tthis.drawSelectedCell()\n\t\t}\n\t}\n\tgiveUp() {\n\t\tthis.game = null\n\t}\n\tresize() {\n\t\tthis.makeCanvas()\n\t}\n}\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}