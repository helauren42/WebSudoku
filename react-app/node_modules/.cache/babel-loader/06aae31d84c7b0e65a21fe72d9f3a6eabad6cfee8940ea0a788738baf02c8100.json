{"ast":null,"code":"import { SOCKET_ADDRESS } from './Const';\nconst MODE_INSERT = \"insert\";\nconst MODE_NOTE = \"note\";\n\n/**\n * @typedef {Object} Cell\n * @property {number|null} value - The cell's value (e.g., 1-9 for Sudoku).\n * @property {number[]} notes - Array of possible values (notes).\n * @property {boolean|null} mod - Whether the cell is modifiable.\n */\n\n/**\n * @class\n */\nclass Cell {\n  constructor() {\n    this.value = null;\n    this.notes = [];\n    this.mod = null;\n  }\n  init(_value) {\n    this.value = _value;\n    this.mod = _value != 0 ? \"const\" : \"var\";\n  }\n  fill(_value) {\n    if (this.mod == \"const\") {\n      throw \"This cell value can not be modified\";\n    } else {\n      this.value = _value;\n    }\n  }\n  addNotes(number) {\n    this.notes.push(number);\n  }\n  rmNotes() {\n    this.notes = [];\n  }\n}\n\n/**\n * @typedef {Object} Game\n * @property {string} level - The game difficulty level.\n * @property {Cell[][]} puzzle - 2D array of Cell objects (e.g., 9x9 grid).\n */\n\n/**\n * @class\n */\nclass Game {\n  constructor(level, puzzle) {\n    this.level = level;\n    this.puzzle = puzzle;\n  }\n}\nclass AbstractBoard {\n  constructor() {\n    this.game = null;\n    this.staticPuzzle = this.getStaticPuzzle();\n    this.row = null;\n    this.column = null;\n    this.msc = 10;\n    this.makeCanvas();\n  }\n  makeCanvas() {\n    console.log(\"makeCanvas\");\n    let length;\n    let canvas = document.getElementById('my-canvas');\n    let container = document.getElementById('my-canvas-container');\n    let parentHeight = container.getBoundingClientRect().height;\n    let parentWidth = container.getBoundingClientRect().width;\n    if (parentHeight >= parentWidth) {\n      length = parentWidth * 0.8;\n    } else {\n      length = parentHeight * 0.85;\n    }\n    console.log(this.msc);\n    canvas.width = length + this.msc * 3;\n    canvas.height = length + this.msc * 3;\n    this.length = length;\n    this.cellLength = length / 9;\n    this.noteCellLength = this.cellLength / 3;\n    this.cellStruct = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n    this.canvas = canvas;\n    this.ctx = canvas.getContext('2d');\n    return;\n  }\n  makePuzzleStructure() {\n    let ret = [];\n    for (let i = 1; i <= 9; i++) {\n      let row = [];\n      for (let j = 1; j <= 9; j++) {\n        row.push(new Cell());\n      }\n      ret.push(row);\n    }\n    return ret;\n  }\n  initPuzzle(sudokuGrid, puzzle) {\n    for (let y = 0; y < 9; y++) {\n      for (let x = 0; x < 9; x++) {\n        puzzle[y][x].init(sudokuGrid[y][x]);\n      }\n    }\n  }\n  getStaticPuzzle() {\n    const sudokuGrid = [[5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9]];\n    let puzzle = this.makePuzzleStructure();\n    this.initPuzzle(sudokuGrid, puzzle);\n    return puzzle;\n  }\n  makeSudokuGrid(array) {\n    let ret = [];\n    for (let i = 0; array[i]; i++) {\n      const string = array[i];\n      let row = [];\n      for (let j = 0; string[j]; j++) {\n        row.push(parseInt(string[j]));\n      }\n      ret.push(row);\n    }\n    return ret;\n  }\n  makeDynamicPuzzle(array) {\n    let puzzle = this.makePuzzleStructure();\n    const sudokuGrid = this.makeSudokuGrid(array);\n    this.initPuzzle(sudokuGrid, puzzle);\n    return puzzle;\n  }\n  clearBoard() {\n    this.ctx.fillStyle = '#bfd2cc';\n    this.ctx.fillRect(10, 10, this.length, this.length);\n  }\n  drawNotes(x, y, cellX, cellY) {\n    console.log(\"drawNotes()\");\n    console.ctx.fillStyle = \"#000000\";\n    /** @type {number[]} */\n    const notes = this.game.puzzle[x][y].notes;\n    for (let r = 0; r <= 2; r++) {\n      for (let c = 0; c <= 2; c++) {\n        const search = this.cellStruct[r][c];\n        for (let i = 0; i < notes.length; i++) {\n          if (notes[i] == search) {\n            this.ctx.lineWidth = 1;\n            const startX = cellX + this.noteCellLength * c;\n            const startY = cellY + this.noteCellLength * r;\n            // at this point startX and startY do not include centering of the text only the starting point of a subcell for the note\n            const midX = startX + this.noteCellLength / 2;\n            const midY = startY + this.noteCellLength / 2;\n            this.ctx.font = `${this.noteCellLength * 0.8}px Roboto Slab`;\n            const textSize = this.ctx.measureText(search);\n            startX = midX - textSize.width / 2;\n            startY = midY + (textSize.actualBoundingBoxAscent - textSize.actualBoundingBoxDescent) / 2;\n            this.ctx.fillText(search, startX, startY);\n            console.log(\"drawing note: \", search);\n            // this.ctx.fillText(character, startX, startY)\n            // const midx = cellX + (this.cellLength / 2)\n            // const midy = cellY + (this.cellLength / 2)\n            // this.ctx.font = `${this.cellLength * 0.8}px Roboto Slab`;\n            // const textSize = this.ctx.measureText(character)\n            // const startX = midx - textSize.width / 2;\n            // const startY = midy + (textSize.actualBoundingBoxAscent - textSize.actualBoundingBoxDescent) / 2;\n            // this.ctx.fillText(character, startX, startY)\n          }\n        }\n      }\n    }\n  }\n  drawSelectedCell() {\n    console.log(\"drawing selected cell\");\n    const x = this.column - 1;\n    const y = this.row - 1;\n    const cellX = this.msc + this.cellLength * x;\n    const cellY = this.msc + this.cellLength * y;\n    // make background light color\n    this.ctx.fillStyle = \"#bad6cf\";\n    this.ctx.fillRect(cellX, cellY, this.cellLength, this.cellLength);\n\n    // make border\n    this.ctx.strokeStyle = \"#859c95\";\n    this.ctx.lineWidth = 4;\n    this.drawCell(cellX, cellY);\n\n    // draw Number\n    this.ctx.fillStyle = \"#859c95\";\n    this.drawInsideCell(x, y, cellX, cellY, this.game.puzzle);\n  }\n  drawCell(cellX, cellY) {\n    this.ctx.beginPath();\n    this.ctx.rect(cellX, cellY, this.cellLength, this.cellLength);\n    this.ctx.stroke();\n  }\n  drawInsideCell(x, y, cellX, cellY, puzzle) {\n    const character = puzzle[y][x].value;\n    if (character === 0) {\n      if (puzzle[y][x].notes.length > 0) {\n        console.log(\"cellX: \", cellX);\n        console.log(\"cellY: \", cellY);\n        this.drawNotes(x, y, cellX, cellY);\n      }\n      return;\n    }\n    this.ctx.fillStyle = puzzle[y][x].mod == \"const\" ? '#343d39' : \"#4b6a66\";\n    const midx = cellX + this.cellLength / 2;\n    const midy = cellY + this.cellLength / 2;\n    this.ctx.font = `${this.cellLength * 0.8}px Roboto Slab`;\n    const textSize = this.ctx.measureText(character);\n    const startX = midx - textSize.width / 2;\n    const startY = midy + (textSize.actualBoundingBoxAscent - textSize.actualBoundingBoxDescent) / 2;\n    this.ctx.fillText(character, startX, startY);\n  }\n  drawRegions() {\n    this.ctx.lineWidth = 3;\n    this.ctx.strokeStyle = '#455c52';\n    this.ctx.beginPath();\n    const regionLength = this.length / 3;\n    for (let y = 0; y <= 3; y++) {\n      this.ctx.moveTo(this.msc, this.msc + y * regionLength);\n      this.ctx.lineTo(this.msc + this.length, this.msc + y * regionLength);\n      this.ctx.stroke();\n    }\n    for (let x = 0; x <= 3; x++) {\n      this.ctx.moveTo(this.msc + x * regionLength, this.msc);\n      this.ctx.lineTo(this.msc + x * regionLength, this.msc + this.length);\n      this.ctx.stroke();\n    }\n  }\n  /**\n   * @param {Cell[][]} puzzle - 2D array of Cell objects\n   */\n  drawPuzzle(puzzle) {\n    // background\n    this.ctx.fillStyle = '#bfd2cc';\n    this.ctx.fillRect(10, 10, this.length, this.length);\n    this.drawRegions();\n    this.ctx.lineWidth = 1;\n    // this.ctx.strokeStyle = '#343d39'\n\n    for (let y = 0; y < 9; y++) {\n      for (let x = 0; x < 9; x++) {\n        const cellX = x * this.cellLength + this.msc;\n        const cellY = y * this.cellLength + this.msc;\n        this.drawCell(cellX, cellY);\n        this.drawInsideCell(x, y, cellX, cellY, puzzle);\n      }\n    }\n  }\n  async fetchDynamicPuzzle(currentLevel) {\n    const url = \"http://\" + SOCKET_ADDRESS + '/fetchPuzzle/' + currentLevel;\n    console.log(url);\n    const arrayPuzzle = await fetch(url).then(res => {\n      return res.json();\n    }).then(data => {\n      return JSON.parse(data);\n    });\n    console.log(\"!!!\");\n    console.log(arrayPuzzle);\n    return this.makeDynamicPuzzle(arrayPuzzle);\n  }\n}\n\n/**\n * @typedef {Object} AbstractBoard\n * @property {function(): void} makeCanvas - Creates the canvas.\n * @property {Game|null} game - The current game instance.\n * @property {Cell[][]} staticPuzzle - Static puzzle grid.\n * @property {number|null} row - Selected row index.\n * @property {number|null} column - Selected column index.\n * @property {number} msc - Some constant (e.g., 10).\n */\n\n/**\n * @class\n */\nexport class Board extends AbstractBoard {\n  constructor() {\n    super();\n    console.log(\"Board constructor\");\n  }\n  drawStaticPuzzle() {\n    this.drawPuzzle(this.staticPuzzle);\n  }\n  async drawDynamicPuzzle(currentLevel) {\n    console.log(\"drawDynamicPuzzle: \", currentLevel);\n    if (!this.game || this.game.level != currentLevel) {\n      console.log(`new game ${!this.game ? \"no active game\" : \"different level\"}`);\n      const puzzle = await this.fetchDynamicPuzzle(currentLevel);\n      this.game = new Game(currentLevel, puzzle);\n    }\n    this.drawPuzzle(this.game.puzzle);\n  }\n  updateCellValue(y, x, value) {\n    try {\n      this.game.puzzle[x][y].fill(value);\n    } catch (err) {\n      console.log(\"You tried to modify a cell from the initial puzzle: \", err);\n    }\n    console.log(\"cell new value: \", this.game.puzzle[x][y].value);\n    this.drawPuzzle(this.game.puzzle);\n  }\n  updateCellNote(y, x, value) {\n    this.game.puzzle[x][y].addNotes(value);\n    console.log(\"cell new notes: \", this.game.puzzle[x][y].notes);\n    this.drawPuzzle(this.game.puzzle);\n  }\n  updateSelection(canvasX, canvasY) {\n    canvasX -= this.msc;\n    canvasY -= this.msc;\n    console.log(\"updateSelection called\");\n    const posX = canvasX / this.cellLength;\n    const posY = canvasY / this.cellLength;\n    console.log(\"posX: \", posX);\n    console.log(\"posY: \", posY);\n    const newcolumn = Math.ceil(posX);\n    const newrow = Math.ceil(posY);\n    if (newcolumn < 1 || newrow < 1 || newcolumn > 9 || newrow > 9 || this.column && this.row && this.column == newcolumn && this.row == newrow) {\n      this.column = null;\n      this.newrow = null;\n      console.log(\"unselected cell\");\n      return null;\n    }\n    this.column = newcolumn;\n    this.row = newrow;\n    console.log(`selected row: ${this.row}, col: ${this.column}`);\n    return {\n      \"x\": this.column - 1,\n      \"y\": this.row - 1\n    };\n  }\n  draw(activeGame, currentLevel) {\n    if (!activeGame) {\n      console.log(\"drawing static puzzle\");\n      this.drawStaticPuzzle();\n    } else {\n      console.log(\"drawing dynamic puzzle level \", currentLevel);\n      this.drawDynamicPuzzle(currentLevel);\n      if (this.column && this.row && this.column >= 1 && this.column <= 9 && this.row >= 1 && this.row <= 9) this.drawSelectedCell();\n    }\n  }\n  noEmptyCell() {\n    const puzzle = this.game.puzzle;\n    if (!puzzle) return false;\n    for (let y = 0; y < 9; y++) for (let x = 0; x < 9; x++) if (puzzle[y][x].value == 0) return false;\n    return true;\n  }\n  giveUp() {\n    this.game = null;\n  }\n  resize() {\n    this.makeCanvas();\n  }\n}","map":{"version":3,"names":["SOCKET_ADDRESS","MODE_INSERT","MODE_NOTE","Cell","constructor","value","notes","mod","init","_value","fill","addNotes","number","push","rmNotes","Game","level","puzzle","AbstractBoard","game","staticPuzzle","getStaticPuzzle","row","column","msc","makeCanvas","console","log","length","canvas","document","getElementById","container","parentHeight","getBoundingClientRect","height","parentWidth","width","cellLength","noteCellLength","cellStruct","ctx","getContext","makePuzzleStructure","ret","i","j","initPuzzle","sudokuGrid","y","x","makeSudokuGrid","array","string","parseInt","makeDynamicPuzzle","clearBoard","fillStyle","fillRect","drawNotes","cellX","cellY","r","c","search","lineWidth","startX","startY","midX","midY","font","textSize","measureText","actualBoundingBoxAscent","actualBoundingBoxDescent","fillText","drawSelectedCell","strokeStyle","drawCell","drawInsideCell","beginPath","rect","stroke","character","midx","midy","drawRegions","regionLength","moveTo","lineTo","drawPuzzle","fetchDynamicPuzzle","currentLevel","url","arrayPuzzle","fetch","then","res","json","data","JSON","parse","Board","drawStaticPuzzle","drawDynamicPuzzle","updateCellValue","err","updateCellNote","updateSelection","canvasX","canvasY","posX","posY","newcolumn","Math","ceil","newrow","draw","activeGame","noEmptyCell","giveUp","resize"],"sources":["/home/henri/Projects/WebSudoku/react-app/src/Board.js"],"sourcesContent":["import { SOCKET_ADDRESS } from './Const';\n\nconst MODE_INSERT = \"insert\"\nconst MODE_NOTE = \"note\"\n\n/**\n * @typedef {Object} Cell\n * @property {number|null} value - The cell's value (e.g., 1-9 for Sudoku).\n * @property {number[]} notes - Array of possible values (notes).\n * @property {boolean|null} mod - Whether the cell is modifiable.\n */\n\n/**\n * @class\n */\nclass Cell {\n\tconstructor() {\n\t\tthis.value = null\n\t\tthis.notes = []\n\t\tthis.mod = null;\n\t}\n\tinit(_value) {\n\t\tthis.value = _value\n\t\tthis.mod = _value != 0 ? \"const\" : \"var\"\n\t}\n\tfill(_value) {\n\t\tif (this.mod == \"const\") {\n\t\t\tthrow \"This cell value can not be modified\"\n\t\t}\n\t\telse {\n\t\t\tthis.value = _value\n\t\t}\n\t}\n\taddNotes(number) {\n\t\tthis.notes.push(number)\n\t}\n\trmNotes() {\n\t\tthis.notes = []\n\t}\n}\n\n/**\n * @typedef {Object} Game\n * @property {string} level - The game difficulty level.\n * @property {Cell[][]} puzzle - 2D array of Cell objects (e.g., 9x9 grid).\n */\n\n/**\n * @class\n */\nclass Game {\n\tconstructor(level, puzzle) {\n\t\tthis.level = level\n\t\tthis.puzzle = puzzle\n\t}\n}\n\nclass AbstractBoard {\n\tconstructor() {\n\t\tthis.game = null\n\t\tthis.staticPuzzle = this.getStaticPuzzle()\n\t\tthis.row = null\n\t\tthis.column = null\n\t\tthis.msc = 10\n\t\tthis.makeCanvas()\n\t}\n\tmakeCanvas() {\n\t\tconsole.log(\"makeCanvas\")\n\t\tlet length;\n\n\t\tlet canvas = document.getElementById('my-canvas')\n\t\tlet container = document.getElementById('my-canvas-container')\n\t\tlet parentHeight = container.getBoundingClientRect().height\n\t\tlet parentWidth = container.getBoundingClientRect().width\n\n\t\tif (parentHeight >= parentWidth) {\n\t\t\tlength = parentWidth * 0.8\n\t\t}\n\t\telse {\n\t\t\tlength = parentHeight * 0.85\n\t\t}\n\t\tconsole.log(this.msc)\n\t\tcanvas.width = length + this.msc * 3\n\t\tcanvas.height = length + this.msc * 3\n\n\t\tthis.length = length\n\t\tthis.cellLength = length / 9\n\t\tthis.noteCellLength = this.cellLength / 3\n\t\tthis.cellStruct = [\n\t\t\t[1, 2, 3],\n\t\t\t[4, 5, 6],\n\t\t\t[7, 8, 9]\n\t\t]\n\t\tthis.canvas = canvas\n\t\tthis.ctx = canvas.getContext('2d')\n\t\treturn\n\t}\n\tmakePuzzleStructure() {\n\t\tlet ret = []\n\t\tfor (let i = 1; i <= 9; i++) {\n\t\t\tlet row = []\n\t\t\tfor (let j = 1; j <= 9; j++) {\n\t\t\t\trow.push(new Cell())\n\t\t\t}\n\t\t\tret.push(row)\n\t\t}\n\t\treturn ret;\n\t}\n\tinitPuzzle(sudokuGrid, puzzle) {\n\t\tfor (let y = 0; y < 9; y++) {\n\t\t\tfor (let x = 0; x < 9; x++) {\n\t\t\t\tpuzzle[y][x].init(sudokuGrid[y][x])\n\t\t\t}\n\t\t}\n\t}\n\tgetStaticPuzzle() {\n\t\tconst sudokuGrid = [\n\t\t\t[5, 3, 4, 6, 7, 8, 9, 1, 2],\n\t\t\t[6, 7, 2, 1, 9, 5, 3, 4, 8],\n\t\t\t[1, 9, 8, 3, 4, 2, 5, 6, 7],\n\t\t\t[8, 5, 9, 7, 6, 1, 4, 2, 3],\n\t\t\t[4, 2, 6, 8, 5, 3, 7, 9, 1],\n\t\t\t[7, 1, 3, 9, 2, 4, 8, 5, 6],\n\t\t\t[9, 6, 1, 5, 3, 7, 2, 8, 4],\n\t\t\t[2, 8, 7, 4, 1, 9, 6, 3, 5],\n\t\t\t[3, 4, 5, 2, 8, 6, 1, 7, 9]\n\t\t];\n\t\tlet puzzle = this.makePuzzleStructure()\n\t\tthis.initPuzzle(sudokuGrid, puzzle)\n\t\treturn puzzle\n\t}\n\tmakeSudokuGrid(array) {\n\t\tlet ret = []\n\t\tfor (let i = 0; array[i]; i++) {\n\t\t\tconst string = array[i]\n\t\t\tlet row = []\n\t\t\tfor (let j = 0; string[j]; j++) {\n\t\t\t\trow.push(parseInt(string[j]))\n\t\t\t}\n\t\t\tret.push(row)\n\t\t}\n\t\treturn ret\n\t}\n\tmakeDynamicPuzzle(array) {\n\t\tlet puzzle = this.makePuzzleStructure()\n\t\tconst sudokuGrid = this.makeSudokuGrid(array)\n\t\tthis.initPuzzle(sudokuGrid, puzzle)\n\t\treturn puzzle\n\t}\n\tclearBoard() {\n\t\tthis.ctx.fillStyle = '#bfd2cc'\n\t\tthis.ctx.fillRect(10, 10, this.length, this.length)\n\t}\n\tdrawNotes(x, y, cellX, cellY) {\n\t\tconsole.log(\"drawNotes()\")\n\t\tconsole.ctx.fillStyle = \"#000000\"\n\t\t/** @type {number[]} */\n\t\tconst notes = this.game.puzzle[x][y].notes\n\t\tfor (let r = 0; r <= 2; r++) {\n\t\t\tfor (let c = 0; c <= 2; c++) {\n\t\t\t\tconst search = this.cellStruct[r][c]\n\t\t\t\tfor (let i = 0; i < notes.length; i++) {\n\t\t\t\t\tif (notes[i] == search) {\n\t\t\t\t\t\tthis.ctx.lineWidth = 1\n\t\t\t\t\t\tconst startX = cellX + this.noteCellLength * c\n\t\t\t\t\t\tconst startY = cellY + this.noteCellLength * r\n\t\t\t\t\t\t// at this point startX and startY do not include centering of the text only the starting point of a subcell for the note\n\t\t\t\t\t\tconst midX = startX + this.noteCellLength / 2\n\t\t\t\t\t\tconst midY = startY + this.noteCellLength / 2\n\t\t\t\t\t\tthis.ctx.font = `${this.noteCellLength * 0.8}px Roboto Slab`;\n\t\t\t\t\t\tconst textSize = this.ctx.measureText(search)\n\t\t\t\t\t\tstartX = midX - textSize.width / 2;\n\t\t\t\t\t\tstartY = midY + (textSize.actualBoundingBoxAscent - textSize.actualBoundingBoxDescent) / 2;\n\t\t\t\t\t\tthis.ctx.fillText(search, startX, startY)\n\t\t\t\t\t\tconsole.log(\"drawing note: \", search)\n\t\t\t\t\t\t// this.ctx.fillText(character, startX, startY)\n\t\t\t\t\t\t// const midx = cellX + (this.cellLength / 2)\n\t\t\t\t\t\t// const midy = cellY + (this.cellLength / 2)\n\t\t\t\t\t\t// this.ctx.font = `${this.cellLength * 0.8}px Roboto Slab`;\n\t\t\t\t\t\t// const textSize = this.ctx.measureText(character)\n\t\t\t\t\t\t// const startX = midx - textSize.width / 2;\n\t\t\t\t\t\t// const startY = midy + (textSize.actualBoundingBoxAscent - textSize.actualBoundingBoxDescent) / 2;\n\t\t\t\t\t\t// this.ctx.fillText(character, startX, startY)\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tdrawSelectedCell() {\n\t\tconsole.log(\"drawing selected cell\")\n\t\tconst x = this.column - 1\n\t\tconst y = this.row - 1\n\t\tconst cellX = this.msc + this.cellLength * x\n\t\tconst cellY = this.msc + this.cellLength * y\n\t\t// make background light color\n\t\tthis.ctx.fillStyle = \"#bad6cf\"\n\t\tthis.ctx.fillRect(cellX, cellY, this.cellLength, this.cellLength)\n\n\t\t// make border\n\t\tthis.ctx.strokeStyle = \"#859c95\"\n\t\tthis.ctx.lineWidth = 4\n\t\tthis.drawCell(cellX, cellY)\n\n\t\t// draw Number\n\t\tthis.ctx.fillStyle = \"#859c95\";\n\t\tthis.drawInsideCell(x, y, cellX, cellY, this.game.puzzle)\n\t}\n\tdrawCell(cellX, cellY) {\n\t\tthis.ctx.beginPath()\n\t\tthis.ctx.rect(cellX, cellY, this.cellLength, this.cellLength)\n\t\tthis.ctx.stroke()\n\t}\n\tdrawInsideCell(x, y, cellX, cellY, puzzle) {\n\t\tconst character = puzzle[y][x].value\n\t\tif (character === 0) {\n\t\t\tif (puzzle[y][x].notes.length > 0) {\n\t\t\t\tconsole.log(\"cellX: \", cellX)\n\t\t\t\tconsole.log(\"cellY: \", cellY)\n\t\t\t\tthis.drawNotes(x, y, cellX, cellY)\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t\tthis.ctx.fillStyle = puzzle[y][x].mod == \"const\" ? '#343d39' : \"#4b6a66\"\n\t\tconst midx = cellX + (this.cellLength / 2)\n\t\tconst midy = cellY + (this.cellLength / 2)\n\t\tthis.ctx.font = `${this.cellLength * 0.8}px Roboto Slab`;\n\t\tconst textSize = this.ctx.measureText(character)\n\t\tconst startX = midx - textSize.width / 2;\n\t\tconst startY = midy + (textSize.actualBoundingBoxAscent - textSize.actualBoundingBoxDescent) / 2;\n\t\tthis.ctx.fillText(character, startX, startY)\n\n\t}\n\tdrawRegions() {\n\t\tthis.ctx.lineWidth = 3\n\t\tthis.ctx.strokeStyle = '#455c52'\n\t\tthis.ctx.beginPath()\n\t\tconst regionLength = this.length / 3\n\t\tfor (let y = 0; y <= 3; y++) {\n\t\t\tthis.ctx.moveTo(this.msc, this.msc + y * regionLength)\n\t\t\tthis.ctx.lineTo(this.msc + this.length, this.msc + y * regionLength)\n\t\t\tthis.ctx.stroke()\n\t\t}\n\t\tfor (let x = 0; x <= 3; x++) {\n\t\t\tthis.ctx.moveTo(this.msc + x * regionLength, this.msc)\n\t\t\tthis.ctx.lineTo(this.msc + x * regionLength, this.msc + this.length)\n\t\t\tthis.ctx.stroke()\n\t\t}\n\t}\n\t/**\n\t * @param {Cell[][]} puzzle - 2D array of Cell objects\n\t */\n\tdrawPuzzle(puzzle) {\n\t\t// background\n\t\tthis.ctx.fillStyle = '#bfd2cc'\n\t\tthis.ctx.fillRect(10, 10, this.length, this.length)\n\n\t\tthis.drawRegions()\n\n\t\tthis.ctx.lineWidth = 1\n\t\t// this.ctx.strokeStyle = '#343d39'\n\n\t\tfor (let y = 0; y < 9; y++) {\n\t\t\tfor (let x = 0; x < 9; x++) {\n\t\t\t\tconst cellX = x * this.cellLength + this.msc\n\t\t\t\tconst cellY = y * this.cellLength + this.msc\n\t\t\t\tthis.drawCell(cellX, cellY)\n\t\t\t\tthis.drawInsideCell(x, y, cellX, cellY, puzzle)\n\t\t\t}\n\t\t}\n\t}\n\tasync fetchDynamicPuzzle(currentLevel) {\n\t\tconst url = \"http://\" + SOCKET_ADDRESS + '/fetchPuzzle/' + currentLevel\n\t\tconsole.log(url)\n\t\tconst arrayPuzzle = await fetch(url).then((res) => {\n\t\t\treturn res.json()\n\t\t}\n\t\t).then((data) => {\n\t\t\treturn JSON.parse(data)\n\t\t})\n\t\tconsole.log(\"!!!\")\n\t\tconsole.log(arrayPuzzle)\n\t\treturn this.makeDynamicPuzzle(arrayPuzzle)\n\t}\n}\n\n/**\n * @typedef {Object} AbstractBoard\n * @property {function(): void} makeCanvas - Creates the canvas.\n * @property {Game|null} game - The current game instance.\n * @property {Cell[][]} staticPuzzle - Static puzzle grid.\n * @property {number|null} row - Selected row index.\n * @property {number|null} column - Selected column index.\n * @property {number} msc - Some constant (e.g., 10).\n */\n\n/**\n * @class\n */\nexport class Board extends AbstractBoard {\n\tconstructor() {\n\t\tsuper()\n\t\tconsole.log(\"Board constructor\")\n\t}\n\tdrawStaticPuzzle() {\n\t\tthis.drawPuzzle(this.staticPuzzle)\n\t}\n\tasync drawDynamicPuzzle(currentLevel) {\n\t\tconsole.log(\"drawDynamicPuzzle: \", currentLevel)\n\t\tif (!this.game || this.game.level != currentLevel) {\n\t\t\tconsole.log(`new game ${!this.game ? \"no active game\" : \"different level\"}`)\n\t\t\tconst puzzle = await this.fetchDynamicPuzzle(currentLevel);\n\t\t\tthis.game = new Game(currentLevel, puzzle)\n\t\t}\n\t\tthis.drawPuzzle(this.game.puzzle)\n\t}\n\tupdateCellValue(y, x, value) {\n\t\ttry {\n\t\t\tthis.game.puzzle[x][y].fill(value);\n\t\t}\n\t\tcatch (err) {\n\t\t\tconsole.log(\"You tried to modify a cell from the initial puzzle: \", err)\n\t\t}\n\t\tconsole.log(\"cell new value: \", this.game.puzzle[x][y].value)\n\t\tthis.drawPuzzle(this.game.puzzle)\n\t}\n\tupdateCellNote(y, x, value) {\n\t\tthis.game.puzzle[x][y].addNotes(value)\n\t\tconsole.log(\"cell new notes: \", this.game.puzzle[x][y].notes)\n\t\tthis.drawPuzzle(this.game.puzzle)\n\t}\n\tupdateSelection(canvasX, canvasY) {\n\t\tcanvasX -= this.msc\n\t\tcanvasY -= this.msc\n\t\tconsole.log(\"updateSelection called\")\n\t\tconst posX = canvasX / this.cellLength\n\t\tconst posY = canvasY / this.cellLength\n\t\tconsole.log(\"posX: \", posX)\n\t\tconsole.log(\"posY: \", posY)\n\t\tconst newcolumn = Math.ceil(posX)\n\t\tconst newrow = Math.ceil(posY)\n\n\t\tif ((newcolumn < 1 || newrow < 1 || newcolumn > 9 || newrow > 9)\n\t\t\t|| (this.column && this.row && this.column == newcolumn && this.row == newrow)) {\n\t\t\tthis.column = null;\n\t\t\tthis.newrow = null;\n\t\t\tconsole.log(\"unselected cell\")\n\t\t\treturn null\n\t\t}\n\t\tthis.column = newcolumn\n\t\tthis.row = newrow\n\t\tconsole.log(`selected row: ${this.row}, col: ${this.column}`)\n\t\treturn { \"x\": this.column - 1, \"y\": this.row - 1 }\n\t}\n\tdraw(activeGame, currentLevel) {\n\t\tif (!activeGame) {\n\t\t\tconsole.log(\"drawing static puzzle\")\n\t\t\tthis.drawStaticPuzzle()\n\t\t}\n\t\telse {\n\t\t\tconsole.log(\"drawing dynamic puzzle level \", currentLevel)\n\t\t\tthis.drawDynamicPuzzle(currentLevel)\n\t\t\tif (this.column && this.row && this.column >= 1 && this.column <= 9 && this.row >= 1 && this.row <= 9)\n\t\t\t\tthis.drawSelectedCell()\n\t\t}\n\t}\n\tnoEmptyCell() {\n\t\tconst puzzle = this.game.puzzle\n\t\tif (!puzzle)\n\t\t\treturn false\n\t\tfor (let y = 0; y < 9; y++)\n\t\t\tfor (let x = 0; x < 9; x++)\n\t\t\t\tif (puzzle[y][x].value == 0)\n\t\t\t\t\treturn false\n\t\treturn true;\n\t}\n\tgiveUp() {\n\t\tthis.game = null\n\t}\n\tresize() {\n\t\tthis.makeCanvas()\n\t}\n}\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}